

		$.ajax({
			url: "./extra/maps.txt", 
			cache: false, 
			success: function(result){
			// LOAD FILENAMES OF MAPS 
			//var result = JSON.parse(result);
			//console.log(result);
			var resfetch;
			if(tmpMap){
				resfetch=JSON.parse(result)['tmpmaps'];
			}else{
				resfetch=JSON.parse(result)['maps'];	
			}
			var outcome='';
			for(i=0;i<resfetch.length;i++){
				outcome+='<div class="panel-heading"><h4 class="panel-title"><a data-toggle="collapse" data-parent="#modmap-accordion-'+i+'" href="#modmap-collapse-'+i+'">'+resfetch[i][0]+'&nbsp;&nbsp;<span class="badge">'+resfetch[i][1].length+'</span></a></h4></div>';
				var tmp='<div id="modmap-collapse-'+i+'" class="panel-collapse collapse out"><div class="panel-body"><ul class="list-group large-group">';
				for(var j=0; j<resfetch[i][1].length; j++){
					tmp+='<li class="list-group-item"><a href="#">'+resfetch[i][1][j]+'</a></li>';
				}
				tmp+='</ul></div></div>';
				outcome+=tmp;
			}
			$('#listgroupsofmaps').html(outcome);

			// LOAD PREVIEW CONTENT FOR EACH FILENAME
			$(".list-group-item").click(function() {
				$("#filecontent").html('<img src="img/loading.gif" width="50" height="50"/>');
				console.log('Loading = '+$(this).text());
				mapID=$(this).text();
				
				var mapPathToLoad = "";
				var mapPathToLoadInURL = "";
				if(tmpMap){
					mapPathToLoad = "./maps/tmp/"+mapID;
					mapPathToLoadInURL = "tmp/"+mapID;
				}else{
					mapPathToLoad = "./maps/"+mapID;
					mapPathToLoadInURL = mapID;
				}

				$.ajax({
					url: mapPathToLoad, 
					cache: false,
					success: function(result){
						var resfetch=result.split("\n");

						if(resfetch[6].indexOf("#") > -1){
							// NEW TYPE OF LEGEND WITH INFO SPLIIT BY #
							console.log("Found legend, split by #");
							var sublegends = resfetch[6].split("#");
							var subleg = "<div>&bull; "+sublegends[0]+"</div>";
							subleg += "<div>&bull; "+sublegends[1]+"</div>";
							subleg += "<div>&bull; "+sublegends[2]+"</div>";
							subleg += "<div>&bull; "+sublegends[3]+"</div>";
							subleg += "<div>&bull; Avg.Seq.Length: "+sublegends[4]+"</div>";
							
							$("#filecontent").html('<p id="mapId"><strong>'+resfetch[5]+'</strong></p><p>'+subleg+'</p><a href="load.html?mapid='+mapPathToLoadInURL+'" target="_blank">Show Map</a><p></p>');
						}else{
							// BACKWARD COMPATIBILITY LEGEND
							console.log("BACKWARD COMPATIBILITY LEGEND");
							$("#filecontent").html('<p id="mapId"><strong>'+resfetch[5]+'</strong></p><p>'+resfetch[6]+'</p><a href="load.html?mapid='+mapPathToLoadInURL+'" target="_blank">Show Map</a><p></p>');
						}

						
					}
				});
			});
		}});

		$("#goto1").click(function(){$('#guide-tabs li:eq(1) a').tab('show');});
		$("#goto2").click(function(){$('#guide-tabs li:eq(2) a').tab('show');});
		$("#goto3").click(function(){$('#guide-tabs li:eq(3) a').tab('show');});
		$("#kmerslen").val('9');
		$("#getTaxa").val('0');
		
		// $('#guide-tabs li:eq(2) a').tab('show');

		$("#buildmapmenucontent").slideUp();
		$("#extendmapmenucontent").slideUp();
		$("#inputdatamenu").slideUp();
		$("#computemenu").slideUp();
		$("#hotkeyslist").slideUp();
		
		$("#hotkeysshowhide").click(function(){
			$("#hotkeyslist").slideToggle();
		});

		$("#buildmapmenuheader").click(function(){
			// console.log("build");
			$("#buildmapmenucontent").slideDown();
			$("#inputdatamenu").slideDown();
			$("#extendmapmenucontent").slideUp();
			$("#computemenu").slideUp();
			$("#numofsets").val(0);
			$("#numofsets").trigger("change");
			// $("#selectnumofsets").css({"border-color": "red", "border-width":"5px", "border-style":"solid"});
		});

		$("#extendmapmenuheader").click(function(){
			// console.log("extend");
			$("#buildmapmenucontent").slideUp();
			$("#inputdatamenu").slideUp();
			$("#extendmapmenucontent").slideDown();
			$("#computemenu").slideUp();
		});


		$("#aid1").click(function(){
			$("#seq0").empty();
			$("#seq0").val("NC_012920");
			$("#seq1").empty();
			$("#seq1").val("NC_001643");	
			computeAIDdist();		
		}); 
		$("#aid2").click(function(){
			$("#seq0").empty();
			$("#seq0").val("NC_012920");
			$("#seq1").empty();
			$("#seq1").val("NC_011137");
			computeAIDdist();					
		});  

		$("#dataset1").click(function(){
			$.ajax({
				url: "./maps/samplemaps/sample1.txt", 
				cache: false,
				success: function(result){
				var result = JSON.parse(result);
				console.log("Loading: ",result["mapDescription"]);
				$('#allInputData').slideDown();
				$("#file_contents").empty();
				$("#file_contents").hide();
				$("#numofsets").val(result["numofsets"]);
				$("#numofsets").trigger("change");
				for(var i=0; i<result["namesets"].length; i++){
					$("#set"+i).html(result["sets"][i]);
					$("#nameset"+i).val(result["namesets"][i]);
					$("#colorset"+i).val(result["colorsets"][i]);		
				}
				$("#stepstatus").hide();
				$("#mainprogressbar").hide();
				$("#computemenu").slideUp();
			}});		
		});  
		$("#dataset2").click(function(){
			$.ajax({
				url: "./maps/samplemaps/sample2.txt", 
				cache: false,
				success: function(result){
				var result = JSON.parse(result);
				console.log("Loading: ",result["mapDescription"]);
				$('#allInputData').slideDown();
				$("#file_contents").empty();
				$("#file_contents").hide();
				$("#numofsets").val(result["numofsets"]);
				$("#numofsets").trigger("change");
				for(var i=0; i<result["namesets"].length; i++){
					$("#set"+i).html(result["sets"][i]);
					$("#nameset"+i).val(result["namesets"][i]);
					$("#colorset"+i).val(result["colorsets"][i]);		
				}
				$("#stepstatus").hide();
				$("#mainprogressbar").hide();
				$("#computemenu").slideUp();
			}});
		});
		$("#dataset3").click(function(){
			$.ajax({
				url: "./maps/samplemaps/sample3.txt", 
				cache: false,
				success: function(result){
				var result = JSON.parse(result);
				console.log("Loading: ",result["mapDescription"]);
				$('#allInputData').slideDown();
				$("#file_contents").empty();
				$("#file_contents").hide();
				$("#numofsets").val(result["numofsets"]);
				$("#numofsets").trigger("change");
				for(var i=0; i<result["namesets"].length; i++){
					$("#set"+i).html(result["sets"][i]);
					$("#nameset"+i).val(result["namesets"][i]);
					$("#colorset"+i).val(result["colorsets"][i]);		
				}
				$("#stepstatus").hide();
				$("#mainprogressbar").hide();
				$("#computemenu").slideUp();
			}});
		});

		$("#kmerslen").change(function(){
			fcgrRes = parseInt($("#kmerslen").val());
			console.log("NEW fcgrRes=",fcgrRes);
		});
		$("#getTaxa").change(function(){
			getTaxa = parseInt($("#getTaxa").val());
			console.log("NEW getTaxa=", getTaxa);
		});

		$("#computedist").click(computeAIDdist);

		$("#loadrefmap").click(function(){
			console.log("Loading RefMap: ", $("#extendmapid").val());
			$("#inputdatamenu").slideDown();

			$.ajax({
				url: "./maps/refmaps/refmap_"+$("#extendmapid").val()+".txt", 
				cache: false,
				success: function(result){
				console.log("./maps/refmaps/refmap_"+$("#extendmapid").val()+".txt");
				var result = JSON.parse(result);
				console.log("RefMap Description: ",result["mapDescription"]);
				
				$('#allInputData').slideDown();
				$("#file_contents").empty();
				$("#file_contents").hide();
				$("#numofsets").val(result["numofsets"]+1);
				$("#numofsets").trigger("change");

				for(var i=0; i<result["namesets"].length; i++){
					$("#set"+i).html(result["sets"][i]);
					$("#nameset"+i).val(result["namesets"][i]);
					$("#colorset"+i).val(result["colorsets"][i]);		
				}

				$("#nameset"+result["namesets"].length).val("NEW_points");
				$("#colorset"+result["namesets"].length).val("black");	
				if( defaultInputType == "ncbi"){
					$("#set"+result["namesets"].length).html($("#extrancbi").val());
				}
				if( defaultInputType == "fasta"){
					var tmpOut = [];
					for(var i=0; i<fastaFilesLoaded.length; i++){
						tmpOut.push("fastaFile"+String(i+1));
					}
					// console.log(tmpOut);
					$("#set"+result["namesets"].length).html(tmpOut.join(","));
				}
				

				$("#stepstatus").hide();
				$("#mainprogressbar").hide();
				$("#computemenu").slideUp();
			}});
		});

		$("#buildmap").click(function(){
			noMDS = false;
			$("#computemenu").slideDown();
			$('#allInputData').slideUp();
			$('#allInputDataMinimized').slideDown();
			console.log("localStorageKeys before=",Object.keys(localStorage));
			localStorage.clear();
			console.log("localStorageKeys after=",Object.keys(localStorage));
			time = new Date();
			step1A = time.getTime();
			$("#file_contents").empty();
			$("#file_contents").hide();
			$("#mainprogressbar").show();
			$("#stepstatus").show();
			$("#stepstatus").html('Step 1 of 3: (NCBI + FCGRs)');
			$('#progress').html('0%'); 
			errorHasOccured = false;
			
			// GET "accIDs"
			accIDsSets=[];
			for(var i=0; i<$("#numofsets").val(); i++){
				console.log(i,$("#set"+i).val().split(","));
				var tmpSet = $("#set"+i).val().split(",");
				if(tmpSet[0]!=""){
					accIDsSets.push(tmpSet);
				}
			}
			accIDs = [].concat.apply([], accIDsSets);
			console.log("accIDs=",accIDs);
			console.log("In total = " + accIDs.length + " sequences.");
			if(accIDs.length < 5){
				errorHasOccured = true;
				$('#progress').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span>'+' ERROR [<strong>Found '+accIDs.length+' sequences.</strong>] Please enter at least 5 sequences and try again.]</div>');
				return;
			}
			if(accIDs.length > offlineCompMinSize ){
				noMDS = true;
				alert("Your input contains more than ["+offlineCompMinSize+"] sequences. This requires that the last step (MDS) has to be computed offline using either Mathematica or Python. Files and code will be provided to you once you reach that point.");
			}

			// AJAX CALLS TO NCBI FOR FASTA FILES and/or READING USER FASTA FILES
			fastaFilesLoadedIndex = 0;
			callsNCBIDone = 0;
			for(var i=0; i<accIDs.length; i++){
				if(!errorHasOccured){

					if(accIDs[i].trim().substr(0,9) == "fastaFile"){
						
						// IF IT'S UPLOADED FASTA FILE
						var reader = new FileReader();
						reader.onload = (function(f,posInAllSeq, accInAllSeq) {
							return function(e) { 
								console.log("fasta: ", accInAllSeq, "fileInfo: ", e.target);
								var data = e.target.result.split(/\n\r?/gi);
								var header;
								if( data.length && data[0][0]==='>' ){ header = data[0]; }
								while (data.length && data[0][0] === '>') {data.shift();}
								var outputFasta=data.join('');

								allSequences[posInAllSeq]=[accInAllSeq, outputFasta.length, "NotAvailable", buildFCGR(outputFasta, fcgrRes), header];

								if(true){console.log([posInAllSeq,accInAllSeq,outputFasta.length,'DONE']);}
								callsNCBIDone += 1;

								// UPDATE PROGRESS AND START computeDistMatrix() IF LAST SEQUENCE IS FASTA
								progress = callsNCBIDone*100.0/accIDs.length;
								progress = progress.toFixed(2);
								if(!errorHasOccured){$('#progress').html(progress+'%');} 
								f
							}
						})(fastaFilesLoaded[fastaFilesLoadedIndex], i, accIDs[i].trim());
						
						reader.readAsText(fastaFilesLoaded[fastaFilesLoadedIndex]);
						fastaFilesLoadedIndex += 1;

					}else{

						// IF IT'S NCBI ACCESSION NUMBER
						loadFastaFromNCBI(i, accIDs[i].trim(), function(ind, accID, output, header){
							allSequences[ind]=[accID, output.length, /**/, buildFCGR(output, fcgrRes), header];
							if(getTaxa){
								getTaxaFromNCBI(ind, accID);
							}else{
								callsNCBIDone += 0.5;
								allSequences[ind][2] = "NotAvailable";
							}
							if(dbg){console.log([ind,accID,output.length,'DONE']);}
							callsNCBIDone += 0.5;

							// UPDATE PROGRESS AND START computeDistMatrix() IF LAST SEQUENCE IS NCBI
							progress = callsNCBIDone*100.0/accIDs.length;
							progress = progress.toFixed(2);
							if(!errorHasOccured){$('#progress').html(progress+'%');} 
							if(callsNCBIDone == accIDs.length && !errorHasOccured){
								time = new Date();
								step1B = time.getTime();
								computeDistMatrix();
							}
						});
					}

				}
			}
		});
		
		$("#allInputDataShow").click(function(){
			$("#allInputData").slideToggle();
		});

		$("#numofsets").change(function(){
			if($("#numofsets").val() == 0){
				$("#numofsets").css({"border-color": "red", "border-width":"5px", "border-style":"solid"});
			}else{
				// DEFAULT VALUES as reported in chrome by jquery
				// $("#numofsets").css("border-color");
				// $("#numofsets").css("border-width");
				// $("#numofsets").css("border-style");
				$("#numofsets").css({"border-color": "rgb(169, 169, 169)", "border-width":"0.666667px", "border-style":"solid"});
			}
			
			var colorList = '';
			for(var i=0; i<labelColors.length; i++){
				colorList += '<option value="'+labelColors[i]+'">'+ labelColors[i]+'</option>';
			}

			// save previous accessions used
			previousdata = [];
			for(var i=0; i<15; i++){
				if($("#set"+i).html() != undefined){
					previousdata.push([ $("#nameset"+i).val(), $("#colorset"+i).val(), $("#set"+i).html() ]);
				}
			}
			console.log("previous_accessions",previousdata);


			console.log("numofsets=",$("#numofsets").val());
			$("#sets").html('');
			for(var i=0; i<$("#numofsets").val(); i++){
				$("#sets").html($("#sets").html()+'<p>GroupName: <input type="text" size="5" id="nameset'+i+'" value="Set['+i+']"> GroupColor: <select id="colorset'+i+'">'+colorList+'</select><br>Insert comma separated NCBI accession numbers:<br><textarea id="set'+i+'" autofocus  rows="2" cols="40"></textarea></p>');
			}
			for(var i=0; i<$("#numofsets").val(); i++){$("#colorset"+i).val(labelColors[i]);}

			//restore saved accessions
			for(var i=0; i<previousdata.length; i++){
				if($("#set"+i).html() != undefined){
					$("#nameset"+i).val(previousdata[i][0]);
					$("#colorset"+i).val(previousdata[i][1]);
					$("#set"+i).html(previousdata[i][2]);
				}
			}


			if($("#numofsets").val()>0){$("#buildmap").show();}else{$("#buildmap").hide();}
		});

		var tmpDataset = geturlparamvalue('dataset');
		if(tmpDataset!=-1 && tmpDataset.slice(0,5)=='local'){
			newDataset = localStorage.getItem("dataset"+tmpDataset.slice(5));
			$("#buildmapmenuheader").click();
			$('#guide-tabs li:eq(2) a').tab('show');
			$("#file_contents").empty();
			$("#file_contents").hide();
			$("#numofsets").val('1');
			$("#numofsets").trigger("change");
			$("#set0").html(newDataset);
			$("#stepstatus").hide();
			$("#mainprogressbar").hide();
			
			// he came here for building, not extending, right?!
			// OR
			// $("#buildmapmenucontent").slideDown();
			// $("#inputdatamenu").slideDown();
			// $("#extendmapmenucontent").slideUp();
			// $("#computemenu").slideUp();


			//$("#buildmap").click(); allow user to change settings if wanted
		}else{
			//console.log('no local dataset');
		}

		$("#fastafiles").hide();
		$('input[type=radio][name=extrapointstype]').change(function() {
      if (this.value == 'ncbi') {
      	defaultInputType = "ncbi";
        console.log("ncbi selected..");
        $("#extrancbi").show();
      	$("#fastafiles").hide();
        $("#fastafilesinfo").hide();
        $("#inputdatamenu").slideUp();
      	$("#computemenu").slideUp(); 
      	$("#loadrefmap").show();   	
      }
      else if (this.value == 'fasta') {
      	defaultInputType = "fasta";
				console.log("fasta selected..");
				$("#extrancbi").hide();
      	$("#fastafiles").show();
				$("#fastafilesinfo").show();
        $("#inputdatamenu").slideUp();
      	$("#computemenu").slideUp();
      	$("#loadrefmap").hide();

      	// Check for the various File API support.
				if(window.File && window.FileReader && window.FileList && window.Blob){
					console.log("everything ok");
				}else{
					console.log('The File APIs are not fully supported in this browser.');
					$('#fastafiles').hide()
					$('#fastafilesinfo').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span> ERROR <strong>The File APIs are not fully supported in this browser.</strong> Please use another browser or input NCBI accession numbers instead.</div>');
					$("#inputdatamenu").slideUp();
      		$("#computemenu").slideUp(); 
				}

				if(fastaFilesLoaded.length >0){
		    	$("#loadrefmap").show();
		    } 
      }
    	});
	
		$("#fastafiles").change(function(evt){
			console.log("Loading fasta files metadata..");
			var files = evt.target.files; 
			fastaFilesLoaded = files;
			var output = [];
	    for (var i = 0, f; f = files[i]; i++) {
	      output.push('<li><strong>', escape(f.name), '</strong> (', f.type || 'n/a', ') - ', f.size, ' bytes, last modified: ', f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a','</li>');
	    }
	    $("#fastafilesinfo").html('<ul>' + output.join('') + '</ul>');
	    $("#loadrefmap").show();
		});







		-----------------------------------------------------


			// var eigenval, eigenvec, eigensystem, finalEigenval, finalEigenvec, points, mapfile ;
	// var fastaFilesLoaded = [], defaultInputType = "ncbi";
	// var mapID, allSequences={}, distMatrix=[], fcgrRes=9, getTaxa = false;
	// var accIDs, step1A, step1B, step2A, step2B, step3A, step3B, time;
	// var callsNCBIDone, progress;
	// var aidDistInfo = [], map_settings, previousdata = [];
	// var tmpMap = false;


---------------------------

	
			// // UPDATE PROGRESS AND START computeDistMatrix() IF LAST SEQUENCE IS NCBI
			// progress = callsNCBIDone*100.0/accIDs.length;
			// progress = progress.toFixed(2);
			// if(!errorHasOccured){$('#progress').html(progress+'%');} 
			// if(callsNCBIDone == accIDs.length && !errorHasOccured){
			// 	time = new Date();
			// 	step1B = time.getTime();
			// 	computeDistMatrix();
			// }


----------------------------


function computeAIDdist(){
		console.log("aid start");
		$("#aidinfo").empty();
		$("#aidinfomenu").slideDown();
		$("#aidinfo").html('<img src="img/loading.gif" width="30" height="30"/>');
		console.log($("#seq0").val());
		console.log($("#seq1").val());
		errorHasOccured = false;

		var gotBothSequences = 0;
		for (var indSeq=0; indSeq<2; indSeq++){
			loadFastaFromNCBI(indSeq, $("#seq"+indSeq).val(), function(ind, accID, output, header){
				aidDistInfo[ind] = [accID, header, output.length,  buildFCGR(output, fcgrRes)];
				if(dbg){console.log([ind,accID,output.length, header,'DONE']);}
				
				gotBothSequences += 1;
				if(gotBothSequences == 2 && !errorHasOccured){
					
					console.log("finished computation");
					var aidinfotext = "<strong>NCBI: ["+aidDistInfo[0][0]+"]</strong> - Length: "+aidDistInfo[0][2]+"<br>Header: "+aidDistInfo[0][1]+"<br><br> <strong>NCBI: ["+aidDistInfo[1][0]+"]</strong> - Length: "+aidDistInfo[1][2]+"<br>Header: "+aidDistInfo[1][1]+"<br><br>";
					
					var aidnumerator = aidDistInfo[0][3]['size'] + aidDistInfo[1][3]['size'];
					var aiddenominator=0;
					for(var unionInd=0; unionInd<Math.pow(4,fcgrRes); unionInd++){
						if( (aidDistInfo[0][3]['flatFCGR'][unionInd]==1) || (aidDistInfo[1][3]['flatFCGR'][unionInd]==1) ){
							aiddenominator++;
						} 
					}
					console.log(aidnumerator,aiddenominator,2 - aidnumerator*1.0/aiddenominator);
					
					aidinfotext += "<strong>AID: </strong>"+ String((2 - aidnumerator*1.0/aiddenominator).toFixed(5));
					$("#aidinfo").html(aidinfotext);


				}

			});	
		}

		console.log("aid end");
	}
	----





			// function assembleChunks (data){
			// 	console.log("data=",data,data.length);
			// 	console.log("this=",this);

			// 	for(var i=0; i<data.length; i++){
			// 		var tmpInfo = data[i];
			// 		console.log("tmpInfo=",i,tmpInfo);
			// 		var bgX = tmpInfo[0], bgY = tmpInfo[2];
			// 		var endX = tmpInfo[1], endY = tmpInfo[3];
			// 		var curObj = tmpInfo[5];
			// 		console.log(curObj);

			// 		for(var indexRow=0; indexRow<= endX - bgX; indexRow++){
			// 			// console.log(indexRow,endX,bgX, endX - bgX);
			// 			for(var indexCol=0; indexCol<= endY -bgY; indexCol++){
			// 				// console.log(indexCol);
			// 				// console.log(bgX + indexRow, bgY + indexCol, tmpInfo[4][indexRow][indexCol],this.distMatrix[bgX + indexRow][bgY + indexCol]);
			// 				// print(curObj);
			// 				curObj.distMatrix[bgX + indexRow][bgY + indexCol] = tmpInfo[4][indexRow][indexCol];
			// 				curObj.distMatrix[bgY + indexCol][bgX + indexRow] = tmpInfo[4][indexRow][indexCol];
			// 				// console.log(bgX + indexRow, bgY + indexCol,tmpInfo[4][indexRow][indexCol],curObj.distMatrix[bgX + indexRow][bgY + indexCol]);
			// 			}
			// 		}
			// 	}

			// 	console.log("distMatrix=",curObj.distMatrix);	

			// };







						// p.map(computeChunks).then( function (data) {
   //                  console.log(data) ;
   //                  for(var i=0; i<data.length; i++){
			// 			var tmpInfo = data[i];
			// 			console.log("tmpInfo=",i,tmpInfo);
			// 			var bgX = tmpInfo[0], bgY = tmpInfo[2];
			// 			var endX = tmpInfo[1], endY = tmpInfo[3];
			// 			var curObj = tmpInfo[5];
			// 			console.log(curObj);

			// 			for(var indexRow=0; indexRow<= endX - bgX; indexRow++){
			// 				// console.log(indexRow,endX,bgX, endX - bgX);
			// 				for(var indexCol=0; indexCol<= endY -bgY; indexCol++){
			// 					// console.log(indexCol);
			// 					// console.log(bgX + indexRow, bgY + indexCol, tmpInfo[4][indexRow][indexCol],this.distMatrix[bgX + indexRow][bgY + indexCol]);
			// 					// print(curObj);
			// 					curObj.distMatrix[bgX + indexRow][bgY + indexCol] = tmpInfo[4][indexRow][indexCol];
			// 					curObj.distMatrix[bgY + indexCol][bgX + indexRow] = tmpInfo[4][indexRow][indexCol];
			// 					// console.log(bgX + indexRow, bgY + indexCol,tmpInfo[4][indexRow][indexCol],curObj.distMatrix[bgX + indexRow][bgY + indexCol]);
			// 				}
			// 			}
			// 		}

			// 		console.log("distMatrix=",curObj.distMatrix);
			// 		console.log("input now=", input);
	  //       });


			// assembleChunks
				// this.p = new Parallel( input );
			// console.log(this.p);
			// this.p.map(this.computeChunks).then(log);
			// this.assembleChunks




// var myVar2 = setTimeout(function(){ 
	// 	// alert("Hello"); 

	// 	// }, 3000);
	
	// 	// var myVar = setInterval(function(){ 
	// 	alert("Hello"); 
	// 	var p = new Parallel( input );
	// 	console.log(p);

	// 	var computeChunks = function (chunk) {
	// 		var bgX = chunk[0], endX = chunk[1], bgY = chunk[2], endY = chunk[3];
	// 		var allSequencesX = chunk[4], allSequencesY = chunk[5], fcgrRes = chunk[6];
	// 		var res=[], tmpRow, numerator, denominator ;
	// 		var timeBegin = new Date();
	// 		console.log("Worker ["+bgX+","+endX+" - "+bgY+","+endY+"]");
	// 		console.log("xa1");
	// 		console.log(chunk);

	// 		for(var i = 0; i<allSequencesX.length; i++){
	// 			console.log("xa2");
	// 			tmpRow=[];
	// 			for(var j = 0; j<allSequencesY.length; j++){
	// 				console.log("xa3");
	// 				numerator = allSequencesX[i][3]['size'] + allSequencesY[j][3]['size'];
	// 				denominator=0;
	// 				for(var unionInd=0; unionInd<Math.pow(4,fcgrRes); unionInd++){
	// 					console.log("xa4",unionInd,Math.pow(4,fcgrRes));
					
	// 					if( (allSequencesX[i][3]['flatFCGR'][unionInd]==1) || (allSequencesY[j][3]['flatFCGR'][unionInd]==1) ){
	// 						denominator++;
	// 					} 
	// 				}
	// 				console.log("xa5");
	// 				// console.log(i,j,'=',numerator,denominator,2 - numerator*1.0/denominator);
	// 				tmpRow.push(2 - numerator*1.0/denominator);
	// 			}
	// 			console.log("xa6");
	// 			res.push(tmpRow);
	// 		}
	// 		console.log("xa7");
	// 		console.log(res);

	// 		var timeEnd = new Date();
	// 		console.log("Worker ["+bgX+","+endX+" - "+bgY+","+endY+"] execution time: "+String((timeEnd-timeBegin)/1000)+" sec");
	// 		return [bgX, endX, bgY, endY, res];
	// 	};

		
	// 	function assembleChunks(data){
	// 		console.log("data=",data,data.length);
	// 		console.log("dMat=",this.distMatrix.length);

	// 		for(var i=0; i<data.length; i++){
	// 			var tmpInfo = data[i];
	// 			// console.log("tmpInfo=",i,tmpInfo);
	// 			var bgX = tmpInfo[0], bgY = tmpInfo[2];
	// 			var endX = tmpInfo[1], endY = tmpInfo[3];
	// 			for(var indexRow=0; indexRow<= endX - bgX; indexRow++){
	// 				for(var indexCol=0; indexCol<= endY -bgY; indexCol++){
	// 					// console.log(bgX + indexRow, bgY + indexCol, tmpInfo[4][indexRow][indexCol],this.distMatrix[bgX + indexRow][bgY + indexCol]);
	// 					this.distMatrix[bgX + indexRow][bgY + indexCol] = tmpInfo[4][indexRow][indexCol];
	// 					this.distMatrix[bgY + indexCol][bgX + indexRow] = tmpInfo[4][indexRow][indexCol];
						
	// 				}
	// 			}
	// 		}	

	// 	}

	// 	p.map(computeChunks).then(assembleChunks);


	// }, 5000);
	
	// myVar = setTimeout(alertFunc, 3000);

	// function alertFunc() {
	//     alert("Hello!");
	// }

	// var p = new Parallel( input );
	// console.log(p);
	
	// var computeChunks = function (chunk) {
	// 	var bgX = chunk[0], endX = chunk[1], bgY = chunk[2], endY = chunk[3];
	// 	var allSequencesX = chunk[4], allSequencesY = chunk[5], fcgrRes = chunk[6];
	// 	var res=[], tmpRow, numerator, denominator ;
	// 	var timeBegin = new Date();
	// 	console.log("Worker ["+bgX+","+endX+" - "+bgY+","+endY+"]");
	// 	console.log("xa1");
	// 	console.log(chunk);

	// 	for(var i = 0; i<allSequencesX.length; i++){
	// 		console.log("xa2");
	// 		tmpRow=[];
	// 		for(var j = 0; j<allSequencesY.length; j++){
	// 			console.log("xa3");
	// 			numerator = allSequencesX[i][3]['size'] + allSequencesY[j][3]['size'];
	// 			denominator=0;
	// 			for(var unionInd=0; unionInd<Math.pow(4,fcgrRes); unionInd++){
	// 				console.log("xa4",unionInd,Math.pow(4,fcgrRes));
				
	// 				if( (allSequencesX[i][3]['flatFCGR'][unionInd]==1) || (allSequencesY[j][3]['flatFCGR'][unionInd]==1) ){
	// 					denominator++;
	// 				} 
	// 			}
	// 			console.log("xa5");
	// 			// console.log(i,j,'=',numerator,denominator,2 - numerator*1.0/denominator);
	// 			tmpRow.push(2 - numerator*1.0/denominator);
	// 		}
	// 		console.log("xa6");
	// 		res.push(tmpRow);
	// 	}
	// 	console.log("xa7");
	// 	console.log(res);

	// 	var timeEnd = new Date();
	// 	console.log("Worker ["+bgX+","+endX+" - "+bgY+","+endY+"] execution time: "+String((timeEnd-timeBegin)/1000)+" sec");
	// 	return [bgX, endX, bgY, endY, res];
	// };

	// p.map(computeChunks).then(assembleChunks);

	// function assembleChunks(data){
	// 	console.log("data=",data,data.length);
	// 	console.log("dMat=",this.distMatrix.length);

	// 	for(var i=0; i<data.length; i++){
	// 		var tmpInfo = data[i];
	// 		// console.log("tmpInfo=",i,tmpInfo);
	// 		var bgX = tmpInfo[0], bgY = tmpInfo[2];
	// 		var endX = tmpInfo[1], endY = tmpInfo[3];
	// 		for(var indexRow=0; indexRow<= endX - bgX; indexRow++){
	// 			for(var indexCol=0; indexCol<= endY -bgY; indexCol++){
	// 				// console.log(bgX + indexRow, bgY + indexCol, tmpInfo[4][indexRow][indexCol],this.distMatrix[bgX + indexRow][bgY + indexCol]);
	// 				this.distMatrix[bgX + indexRow][bgY + indexCol] = tmpInfo[4][indexRow][indexCol];
	// 				this.distMatrix[bgY + indexCol][bgX + indexRow] = tmpInfo[4][indexRow][indexCol];
					
	// 			}
	// 		}
	// 	}	


-------------------------


// 	//DEBUGING FOR PRINTING dMatrix
		// 	if(noMDS){
		// 		if(localDBG){console.log(distMatrixCentered);}
				
		// 		$('#progress').html('<p>Please continue computation offline. <br> <strong>Instructions:</strong>\
		// 			<ul><li>Download zip file (It is downloaded automatically)</li>\
		// 			<li>Extract zip contents to a directory of your choice</li>\
		// 			<li>Download either <a href="./extra/mds.nb" target="_blank">MDS-Mathematica</a> or <a href="./extra/mds.py" target="_blank">MDS-Python</a> code and place it in the same directory</li>\
		// 			<li>Run the code, you should get an output file [map_output.txt]</li>\
		// 			<li>Open [map_output.txt], copy its content and paste it <a href="./extra/input.html" target="_blank">here</a></li>\
		// 			</ul></p>');
		// 		console.log('COPY/PASTE MATHEMATICA');
				
		// 		var toprint="{";
		// 		for(var i=0; i<distMatrixCentered.length; i++){
		// 			toprint+='{';
		// 			for (var j=0; j<distMatrixCentered.length; j++){
		// 				toprint+=distMatrixCentered[i][j].toFixed(10)+',';
		// 			}
		// 			toprint = toprint.substring(0, toprint.length - 1);
		// 			toprint+='},'
		// 		}
		// 		toprint = toprint.substring(0, toprint.length - 1);
		// 		toprint+='}';
				
		// 		var toprint2='{';
		// 		for(var i=0; i<accIDsSets.length; i++){
		// 			toprint2 += '{';
		// 			for(var j=0; j<accIDsSets[i].length; j++){
		// 				toprint2 += '"'+accIDsSets[i][j]+'",';
		// 			}
		// 			toprint2 = toprint2.substring(0, toprint2.length - 1);
		// 			toprint2 +='},'
		// 		}
		// 		toprint2 = toprint2.substring(0, toprint2.length - 1);
		// 		toprint2 +='}';
				
		// 		var toprint3='{';
		// 		var totalNumOfSeq = Object.keys(allSequences).length;
		// 		for(var i=0; i<totalNumOfSeq; i++){
		// 			toprint3 += '{';
		// 			toprint3 += '"'+allSequences[i][0]+'",';
		// 			toprint3 += '"'+allSequences[i][1]+'",';
		// 			toprint3 += '"'+allSequences[i][2]+'",';
		// 			toprint3 += '"'+allSequences[i][4]+'",';
		// 			toprint3 = toprint3.substring(0, toprint3.length - 1);
		// 			toprint3 +='},'
		// 		}
		// 		toprint3 = toprint3.substring(0, toprint3.length - 1);
		// 		toprint3 +='}';

		// 		var toprint4 = '';
		// 		for(var i=0; i<accIDsSets.length; i++){	toprint4 += accIDsSets[i].length + ",";	}
		// 		toprint4 = toprint4.slice(0,-1);
		// 		toprint4 += "\n";
		// 		for(var i=0; i<accIDsSets.length; i++){ toprint4 += $("#colorset"+i).val() + ","; }
		// 		toprint4 = toprint4.slice(0,-1);
		// 		toprint4 += "\n";
		// 		toprint4 += "5\nIndex,Acc,Name,Length,Taxa\n";
		// 		for(var i=0; i<accIDsSets.length; i++){ toprint4 += $("#colorset"+i).val() + ","; }
		// 		toprint4 = toprint4.slice(0,-1);
		// 		toprint4 += "\n";
		// 		for(var i=0; i<accIDsSets.length; i++){toprint4 +=$("#nameset"+i).val()+" ("+accIDsSets[i].length+"),";}
		// 		toprint4 = toprint4.slice(0,-1);
		// 		toprint4 += "\n";

		// 		for(var i=0; i<$("#numofsets").val(); i++){ toprint4 += $("#nameset"+i).val() + ', '; }
		// 		toprint4 = toprint4.slice(0,-2);  //because of space above!
		// 		// OLD: toprint4 += '. Number of sequences is '+accIDs.length+ "\n";
		// 		toprint4 += '#User-input sequences#'+accIDs.length+"#Approx.Inf.Dist#NA\n";
				
				
		// 		// completely debugging part
		// 		var toprint5="{";
		// 		for(var i=0; i<distMatrix.length; i++){
		// 			toprint5+='{';
		// 			for (var j=0; j<distMatrix.length; j++){
		// 				toprint5+=distMatrix[i][j].toFixed(10)+',';
		// 			}
		// 			toprint5 = toprint5.substring(0, toprint5.length - 1);
		// 			toprint5+='},'
		// 		}
		// 		toprint5 = toprint5.substring(0, toprint5.length - 1);
		// 		toprint5+='}';

		// 		var zip = new JSZip();
		// 		zip.file("dMatrix.txt", toprint);
		// 		zip.file("accIDs.txt", toprint2);
		// 		zip.file("allSequences.txt", toprint3);
		// 		zip.file("mapheader.txt", toprint4);
		// 		zip.file("debug.txt", toprint5);
		// 		var content = zip.generate({type:"blob"});
		// 		// see FileSaver.js
		// 		saveAs(content, "dataForMMA.zip");
		// 		return;
		// 	}
		

		
	// }